<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[log代码解读]]></title>
      <url>/2023/04/25/dpdk-log/</url>
      <content type="html"><![CDATA[<p>dpdk 的日志系统并不复杂。dpdk 使用 type 和 level 划分日志，除了预设的日志类型，用户也可自行注册日志类型，dpdk 日志系统的初始化在 main 函数之前。</p>
<h3 id="1初始化"><a class="anchor" href="#1初始化">#</a> 1. 初始化</h3>
<p>dpdk 的日志初始化函数为 rte_log_init，执行再 main 函数之前，定义在:</p>
<pre><code class="language-C">RTE_INIT_PRIO(rte_log_init, LOG)
&#123;
	uint32_t i;

	rte_log_set_global_level(RTE_LOG_DEBUG);//设置默认log登记为debug

	rte_logs.dynamic_types = calloc(RTE_LOGTYPE_FIRST_EXT_ID,
		sizeof(struct rte_log_dynamic_type));//申请32个动态日志类型的空间
	if (rte_logs.dynamic_types == NULL)
		return;

	/* register legacy log types */
	for (i = 0; i &lt; RTE_DIM(logtype_strings); i++)//预制几种日志类型
		__rte_log_register(logtype_strings[i].logtype,
				logtype_strings[i].log_id);

	rte_logs.dynamic_types_len = RTE_LOGTYPE_FIRST_EXT_ID;
&#125;
</code></pre>
<p>该函数由宏 <code>RTE_INIT_PRIO</code>  定义</p>
<pre><code class="language-C">#define RTE_INIT_PRIO(func, prio) \
static void __attribute__((constructor(RTE_PRIO(prio)), used)) func(void)
#endif
</code></pre>
<p>这里 <code>__attribute__((constructor</code>  是用来修饰函数的，代表这个函数是在 main 函数执行之前执行</p>
<p>同时一个程序可以有多个 <code>__attribute__((constructor</code> ，那么就需要有优先级概念，优先级数字越小，优先级越高</p>
<pre><code class="language-C">#define RTE_PRIORITY_LOG 101

#define RTE_PRIO(prio) \
	RTE_PRIORITY_ ## prio
</code></pre>
<p>优先级还是很高的～</p>
<p><code>rte_log_init</code>  的内容就是设置默认日志等级为 debug，然后注册几种基本的日志类型 <code>__rte_log_register</code></p>
<p>log 类型具有两个成员，一个是名字，一个是 log 等级。 <code>__rte_log_register</code>  将所有日志类型的等级注册为 info</p>
<h3 id="2日志类型注册"><a class="anchor" href="#2日志类型注册">#</a> 2. 日志类型注册</h3>
<p>用户可以自定义注册日志类型，默认注册类型也为 info，默认系统日志等级为 debug，所以 info 类型的日志也会被打印</p>
<pre><code class="language-C">int
rte_log_register(const char *name)
&#123;
	struct rte_log_dynamic_type *new_dynamic_types;
	int id, ret;

	id = rte_log_lookup(name);
	if (id &gt;= 0)
		return id;

	new_dynamic_types = realloc(rte_logs.dynamic_types,
		sizeof(struct rte_log_dynamic_type) *
		(rte_logs.dynamic_types_len + 1));
	if (new_dynamic_types == NULL)
		return -ENOMEM;
	rte_logs.dynamic_types = new_dynamic_types;

	ret = __rte_log_register(name, rte_logs.dynamic_types_len);
	if (ret &lt; 0)
		return ret;

	rte_logs.dynamic_types_len++;

	return ret;
&#125;
</code></pre>
<h3 id="3输出日志"><a class="anchor" href="#3输出日志">#</a> 3. 输出日志</h3>
<pre><code class="language-C">rte_log(uint32_t level, uint32_t logtype, const char *format, ...)
&#123;
	va_list ap;
	int ret;

	va_start(ap, format);
	ret = rte_vlog(level, logtype, format, ap);
	va_end(ap);
	return ret;
&#125;

int
rte_vlog(uint32_t level, uint32_t logtype, const char *format, va_list ap)
&#123;
	FILE *f = rte_log_get_stream();
	int ret;

	if (logtype &gt;= rte_logs.dynamic_types_len)
		return -1;
	if (!rte_log_can_log(logtype, level))
		return 0;

	/* save loglevel and logtype in a global per-lcore variable */
	RTE_PER_LCORE(log_cur_msg).loglevel = level;
	RTE_PER_LCORE(log_cur_msg).logtype = logtype;

	ret = vfprintf(f, format, ap);
	fflush(f);
	return ret;
&#125;
</code></pre>
<p>rte_vlog 首先获取到目前系统设置的文件流，然后判断等级参数是否合理，如果等级大于系统设置的默认等级，不进行打印，之后调用 vprintf 日志数据打入到流文件中。<br />
另外可以设置日志输入流</p>
<pre><code class="language-C">rte_openlog_stream(FILE *f)
&#123;
	rte_logs.file = f;
	return 0;
&#125;
</code></pre>
]]></content>
      
        <categories>
            
            <category> dpdk代码解读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dpdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2023/04/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
