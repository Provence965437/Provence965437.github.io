<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[uniapp+express+mysql制作视频网站]]></title>
      <url>/2023/04/26/video_web-1/</url>
      <content type="html"><![CDATA[<h2 id="主人还没有任何更新"><a class="anchor" href="#主人还没有任何更新">#</a> 主人还没有任何更新</h2>
]]></content>
      
        <categories>
            
            <category> 视频网站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> express </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log代码解读]]></title>
      <url>/2023/04/25/dpdk-log/</url>
      <content type="html"><![CDATA[<p>dpdk 的日志系统并不复杂。dpdk 使用 type 和 level 划分日志，除了预设的日志类型，用户也可自行注册日志类型，dpdk 日志系统的初始化在 main 函数之前。</p>
<h3 id="1初始化"><a class="anchor" href="#1初始化">#</a> 1. 初始化</h3>
<p>dpdk 的日志初始化函数为 rte_log_init，执行再 main 函数之前，定义在:</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">RTE_INIT_PRIO</span><span class="token punctuation">(</span>rte_log_init<span class="token punctuation">,</span> LOG<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token class-name">uint32_t</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token function">rte_log_set_global_level</span><span class="token punctuation">(</span>RTE_LOG_DEBUG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置默认 log 登记为 debug</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>	rte_logs<span class="token punctuation">.</span>dynamic_types <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>RTE_LOGTYPE_FIRST_EXT_ID<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>		<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rte_log_dynamic_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 申请 32 个动态日志类型的空间</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>rte_logs<span class="token punctuation">.</span>dynamic_types <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>	<span class="token comment">/* register legacy log types */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">RTE_DIM</span><span class="token punctuation">(</span>logtype_strings<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 预制几种日志类型</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token function">__rte_log_register</span><span class="token punctuation">(</span>logtype_strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>logtype<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>				logtype_strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>log_id<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>	rte_logs<span class="token punctuation">.</span>dynamic_types_len <span class="token operator">=</span> RTE_LOGTYPE_FIRST_EXT_ID<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>该函数由宏 <code>RTE_INIT_PRIO</code>  定义</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RTE_INIT_PRIO</span><span class="token expression"><span class="token punctuation">(</span>func<span class="token punctuation">,</span> prio<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token function">RTE_PRIO</span><span class="token punctuation">(</span>prio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>这里 <code>__attribute__((constructor</code>  是用来修饰函数的，代表这个函数是在 main 函数执行之前执行</p>
<p>同时一个程序可以有多个 <code>__attribute__((constructor</code> ，那么就需要有优先级概念，优先级数字越小，优先级越高</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RTE_PRIORITY_LOG</span> <span class="token expression"><span class="token number">101</span></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RTE_PRIO</span><span class="token expression"><span class="token punctuation">(</span>prio<span class="token punctuation">)</span> </span><span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token expression">RTE_PRIORITY_ </span><span class="token punctuation">##</span> <span class="token expression">prio</span></span></pre></td></tr></table></figure><p>优先级还是很高的～</p>
<p><code>rte_log_init</code>  的内容就是设置默认日志等级为 debug，然后注册几种基本的日志类型 <code>__rte_log_register</code></p>
<p>log 类型具有两个成员，一个是名字，一个是 log 等级。 <code>__rte_log_register</code>  将所有日志类型的等级注册为 info</p>
<h3 id="2日志类型注册"><a class="anchor" href="#2日志类型注册">#</a> 2. 日志类型注册</h3>
<p>用户可以自定义注册日志类型，默认注册类型也为 info，默认系统日志等级为 debug，所以 info 类型的日志也会被打印</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">rte_log_register</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">struct</span> <span class="token class-name">rte_log_dynamic_type</span> <span class="token operator">*</span>new_dynamic_types<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token keyword">int</span> id<span class="token punctuation">,</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>	id <span class="token operator">=</span> <span class="token function">rte_log_lookup</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>		<span class="token keyword">return</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>	new_dynamic_types <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>rte_logs<span class="token punctuation">.</span>dynamic_types<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>		<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rte_log_dynamic_type</span><span class="token punctuation">)</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="13"></td><td><pre>		<span class="token punctuation">(</span>rte_logs<span class="token punctuation">.</span>dynamic_types_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>new_dynamic_types <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	rte_logs<span class="token punctuation">.</span>dynamic_types <span class="token operator">=</span> new_dynamic_types<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>	ret <span class="token operator">=</span> <span class="token function">__rte_log_register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> rte_logs<span class="token punctuation">.</span>dynamic_types_len<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>	rte_logs<span class="token punctuation">.</span>dynamic_types_len<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="3输出日志"><a class="anchor" href="#3输出日志">#</a> 3. 输出日志</h3>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">rte_log</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> level<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> logtype<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	va_list ap<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">int</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>	<span class="token function">va_start</span><span class="token punctuation">(</span>ap<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	ret <span class="token operator">=</span> <span class="token function">rte_vlog</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> logtype<span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>	<span class="token function">va_end</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token function">rte_vlog</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> level<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> logtype<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> va_list ap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>	FILE <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">rte_log_get_stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token keyword">int</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span>logtype <span class="token operator">>=</span> rte_logs<span class="token punctuation">.</span>dynamic_types_len<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rte_log_can_log</span><span class="token punctuation">(</span>logtype<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>	<span class="token comment">/* save loglevel and logtype in a global per-lcore variable */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>	<span class="token function">RTE_PER_LCORE</span><span class="token punctuation">(</span>log_cur_msg<span class="token punctuation">)</span><span class="token punctuation">.</span>loglevel <span class="token operator">=</span> level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>	<span class="token function">RTE_PER_LCORE</span><span class="token punctuation">(</span>log_cur_msg<span class="token punctuation">)</span><span class="token punctuation">.</span>logtype <span class="token operator">=</span> logtype<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>	ret <span class="token operator">=</span> <span class="token function">vfprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> format<span class="token punctuation">,</span> ap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>	<span class="token function">fflush</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>	<span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>rte_vlog 首先获取到目前系统设置的文件流，然后判断等级参数是否合理，如果等级大于系统设置的默认等级，不进行打印，之后调用 vprintf 日志数据打入到流文件中。<br />
另外可以设置日志输入流</p>
<figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">rte_openlog_stream</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>f<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>	rte_logs<span class="token punctuation">.</span>file <span class="token operator">=</span> f<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> dpdk代码解读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dpdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2023/04/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo new <span class="token string">"My New Post"</span></pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><figcaption data-lang="bash"><span>h</span></figcaption><table><tr><td data-num="1"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
