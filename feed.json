{
    "version": "https://jsonfeed.org/version/1",
    "title": "风雪追击",
    "subtitle": "一缕春风走向你",
    "icon": "http://example.com/images/favicon.ico",
    "description": "记录博客，从事驱动开发，unity业余爱好",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/05/05/libbpf-1/",
            "url": "http://example.com/2023/05/05/libbpf-1/",
            "title": "【内核追踪】Centos7，libbpf安装使用",
            "date_published": "2023-05-05T07:26:03.947Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWtyeWlrby5jb20vcG9zdHMvbGliYnBmLWJvb3RzdHJhcC8=\">参考原文</span></p>\n<h2 id=\"1内核升级\"><a class=\"anchor\" href=\"#1内核升级\">#</a> 1. 内核升级</h2>\n<p>与之前的 bcc 安装一样，想开发 libbpf 应用依然需要升级内核 (即使运行不需要 Clang/LLVM 和内核头文件)<br />\n 同时需要开启 CONFIG_DEBUG_INFO_BTF=y<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpYmJwZi9saWJicGYvdHJlZS9mOGNkMDBmNjEzMDJjYTRkODY0NWUwMDdhY2Y3ZjU0NmRjMzIzYjMz\"> 项目 readme</span> 中写明了哪些 Linux 版本默认开启这个选项。<br />\n我依然使用之前升级的 6.3 内核</p>\n<h2 id=\"2编译高版本gcc\"><a class=\"anchor\" href=\"#2编译高版本gcc\">#</a> 2. 编译高版本 gcc</h2>\n<p>编译 llvm1.0 及样例程序需要高版本 gcc。不然会报各种宏的错误</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> centos-release-scl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> devtoolset-8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#激活</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>scl <span class=\"token builtin class-name\">enable</span> devtoolset-8 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">source</span> /opt/rh/devtoolset-8/enable</pre></td></tr></table></figure><p>其中 devtoolset-x 想下哪个版本就填几</p>\n<h2 id=\"3编译安装llvm100\"><a class=\"anchor\" href=\"#3编译安装llvm100\">#</a> 3. 编译安装 llvm10.0</h2>\n<p>之前我们编译了 llvm7.0.1, 但 libbpf 需要 llvm/clang 版本在 10.0 版本以上。因此我们要再手动编译一个版本<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xsdm0vbGx2bS1wcm9qZWN0L3JlbGVhc2VzLw==\"> llvm 发行版下载地址</span><br />\n下载 llvm-project-x.x.x.src.tar.xz 压缩包<br />\n解压</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xz <span class=\"token parameter variable\">-d</span> llvm-project-x.x.x.src.tar.xz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xvf</span> llvm-project-x.x.x.src.tar</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> llvm-project-x.x.x</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> build</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cmake3 <span class=\"token parameter variable\">-DCMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span> <span class=\"token parameter variable\">-DCMAKE_BUILD_TYPE</span><span class=\"token operator\">=</span>Release <span class=\"token parameter variable\">-DLLVM_ENABLE_RTTI</span><span class=\"token operator\">=</span>ON <span class=\"token parameter variable\">-DCMAKE_CXX_COMPILER</span><span class=\"token operator\">=</span>/home/user/libs/gcc-7.1.0/gcc_compile/bin/c++ <span class=\"token parameter variable\">-DCMAKE_C_COMPILER</span><span class=\"token operator\">=</span>/home/user/libs/gcc-7.1.0/gcc_compile/bin/gcc <span class=\"token parameter variable\">-DLLVM_ENABLE_PROJECTS</span><span class=\"token operator\">=</span><span class=\"token string\">\"clang;libcxx;libcxxabi\"</span> <span class=\"token parameter variable\">-G</span> <span class=\"token string\">\"Unix Makefiles\"</span> <span class=\"token punctuation\">..</span>/llvm</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>注意，cmake 参数分别填入安装地址，前面安装的 gcc 地址，c++ 地址</p>\n<h2 id=\"4下载样例程序\"><a class=\"anchor\" href=\"#4下载样例程序\">#</a> 4. 下载样例程序</h2>\n<p>下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpYmJwZi9saWJicGYtYm9vdHN0cmFw\"> libbpf-bootstrap</span> 程序</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone --recurse-submodules https://github.com/libbpf/libbpf-bootstrap</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> submodule update <span class=\"token parameter variable\">--init</span> <span class=\"token parameter variable\">--recursive</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> examples/c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>如果是有某个程序编译不过，可能 llvm 版本不够的问题，在 Makefile 中将这个程序去掉跳过即可。</p>\n<h2 id=\"5minimal程序讲解\"><a class=\"anchor\" href=\"#5minimal程序讲解\">#</a> 5.minimal 程序讲解</h2>\n<p>下面来看一下 libbpf 最简样例程序，相当于 helloword</p>\n<h3 id=\"bpf程序\"><a class=\"anchor\" href=\"#bpf程序\">#</a> BPF 程序</h3>\n<p>minimal.bpf.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* Copyright (c) 2020 Facebook */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/bpf.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bpf/bpf_helpers.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> LICENSE<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">SEC</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"license\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Dual BSD/GPL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> my_pid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">SEC</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tp/syscalls/sys_enter_write\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">handle_tp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ctx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">bpf_get_current_pid_tgid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">!=</span> my_pid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">bpf_printk</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BPF triggered from PID %d.\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>#include &lt;linux/bpf.h&gt; 包括一些基本的 BPF 相关类型和使用内核端 BPF API 所必需的常量（例如，BPF 辅助函数标志）。 bpf_helpers.h 标头需要此标头，如下所示。 bpf_helpers.h 由 libbpf 提供，包含最常用的宏、常量和 BPF 帮助程序定义，bpf_get_current_pid_tgid () 就是一个 bpf_helper 函数<br />\n LICENSE 变量定义了 BPF 代码的许可证，这是固定的</p>\n<p>SEC (&quot;tp/syscalls/sys_enter_write&quot;) 定义了加载到内核中的 BPF 程序，从命名中我们可以看出，该 BPF 程序的作用是当有系统调用 write 时会触发下面的 handle_tp<br />\n 在 handle_tp 中，通过 bpf_get_current_pid_tgid 获取 write 调用进程的 pid，然后判断进程 id 是否相同，若相同则进行打印</p>\n<p>我们可以看到 my_pid 被初始化为 0，那么他是在哪里被修改的呢，其实是 minimal.c 文件中</p>\n<h3 id=\"用户侧程序\"><a class=\"anchor\" href=\"#用户侧程序\">#</a> 用户侧程序</h3>\n<p>在 minimal.c 中首先包含了头文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"minimal.skel.h\"</span></span></pre></td></tr></table></figure><p>这个文件由 bpftool 生成，反映了 minimal.bpf.c 和 minimal.c 中用到的结构体<br />\n下面看一下 minimal.c 中的主函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">minimal_bpf</span> <span class=\"token operator\">*</span>skel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">/* Set up libbpf errors and debug info callback */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">libbpf_set_print</span><span class=\"token punctuation\">(</span>libbpf_print_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>libbpf_set_print</code>  提供 libbpf 体质提供回调吗，默认只记录 error 级别的错误。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>skel <span class=\"token operator\">=</span> <span class=\"token function\">minimal_bpf__open_and_load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>skel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to open and load BPF skeleton\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在，使用自动生成的 BPF 框架，准备 BPF 程序并将其加载到内核中，让 BPF 验证程序检查它。 如果此步骤成功，则您的 BPF 代码是正确的，并且可以附加到您需要的任何 BPF 钩子上。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>skel<span class=\"token operator\">-></span>bss<span class=\"token operator\">-></span>my_pid <span class=\"token operator\">=</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但首先，我们需要将 PID 传递给 BPF 代码，以便它可以过滤掉来自不相关进程的不相关的 write () 调用。 这通过内存映射区域_直接设置了 my_pid BPF 全局变量值。 如上所述，这就是用户空间访问（读取和写入）BPF 全局变量的方式。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>err <span class=\"token operator\">=</span> <span class=\"token function\">minimal_bpf__attach</span><span class=\"token punctuation\">(</span>skel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to attach BPF skeleton\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">goto</span> cleanup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully started!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们终于可以将 handle_tp BPF 程序附加到相应的内核跟踪点，该程序现在已经在内核中等待了。 这 “激活” 了 BPF 程序，内核将开始在内核上下文中执行我们自定义的 BPF 代码，以响应每个 write () 系统调用调用！</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">/* trigger our BPF program */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的无限循环确保 handle_tp BPF 程序一直附加在内核中，直到用户终止进程（例如，通过按 Ctrl-C）。 此外，它将通过 fprintf (stderr, ...) 调用定期（每秒一次）生成 write () 系统调用调用。 这样就可以从 handle_tp 中 “监控” 内核的内部结构以及状态如何随时间变化。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cleanup<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">minimal_bpf__destroy</span><span class=\"token punctuation\">(</span>skel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果前面的任何步骤出错，minimal_bpf__destroy () 将清理所有资源（包括内核空间和用户空间）。 确保您始终这样做是一个很好的做法，但即使您的应用程序在没有清理的情况下崩溃，内核仍会清理资源。</p>\n<h3 id=\"makefile\"><a class=\"anchor\" href=\"#makefile\">#</a> Makefile</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>INCLUDES :<span class=\"token operator\">=</span> -I<span class=\"token variable\"><span class=\"token variable\">$(</span>OUTPUT<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CFLAGS :<span class=\"token operator\">=</span> <span class=\"token parameter variable\">-g</span> <span class=\"token parameter variable\">-Wall</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ARCH :<span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>shell <span class=\"token function\">uname</span> <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/x86_64/x86/'</span><span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>默认情况下，所有中间文件都会写入到 src/.output/ 子目录下，所以这个目录被添加到 C 编译器的包含路径中<br />\n ARCH 捕获了主机操作系统的架构，这个架构会在后面的 BPF 代码编译步骤中传递给 low-level 的 trace_helper 宏</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>APPS <span class=\"token operator\">=</span> minimal bootstrap</pre></td></tr></table></figure><p>这里列出了所有可用的应用文件。如果你需要额外复制一份应用文件，你只需要在这里添加一个待编译的目标文件名称，然后在对应的文件名下列举对应的操作过程</p>\n",
            "tags": [
                "Ebpf内核追踪",
                "Ebpf",
                "libbpf"
            ]
        },
        {
            "id": "http://example.com/2023/04/28/bcc-1/",
            "url": "http://example.com/2023/04/28/bcc-1/",
            "title": "【内核追踪】Centos7，BCC安装使用",
            "date_published": "2023-04-28T05:51:48.885Z",
            "content_html": "<h2 id=\"1内核升级\"><a class=\"anchor\" href=\"#1内核升级\">#</a> 1. 内核升级</h2>\n<p>BCC 使用需要内核版本大于 4.1，我的环境是 centos7.9，内核版本是 3.10，因此需要首先进行内核升级。</p>\n<h3 id=\"11更新yum源仓库\"><a class=\"anchor\" href=\"#11更新yum源仓库\">#</a> 1.1 更新 yum 源仓库</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ yum <span class=\"token parameter variable\">-y</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$rpm</span> <span class=\"token parameter variable\">--import</span> https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$rpm</span> <span class=\"token parameter variable\">-Uvh</span> http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</pre></td></tr></table></figure><p>查看可用内核包</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$yum</span> <span class=\"token parameter variable\">--disablerepo</span><span class=\"token operator\">=</span><span class=\"token string\">\"*\"</span> <span class=\"token parameter variable\">--enablerepo</span><span class=\"token operator\">=</span><span class=\"token string\">\"elrepo-kernel\"</span> list available</pre></td></tr></table></figure><h3 id=\"12安装新内核\"><a class=\"anchor\" href=\"#12安装新内核\">#</a> 1.2 安装新内核</h3>\n<p>查看旧内核相关项</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span><span class=\"token function\">grep</span> kernel</pre></td></tr></table></figure><p>先卸载旧的 kernel-headers，kernel-tools, kernel-tools-libs，只保留内核。<br />\n之后安装新内核及相关库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$yum</span> <span class=\"token parameter variable\">--enablerepo</span><span class=\"token operator\">=</span>elrepo-kernel <span class=\"token function\">install</span> kernel-ml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$yum</span> <span class=\"token parameter variable\">--enablerepo</span><span class=\"token operator\">=</span>elrepo-kernel <span class=\"token function\">install</span>  kernel-ml-headers kernel-ml-tools kernel-ml-tools-libs kernel-ml-devel</pre></td></tr></table></figure><p>设置启动项</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 生成启动项配置文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$grub2</span>-mkconfig  <span class=\"token parameter variable\">-o</span> /boot/grub2/grub.cfg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#查看当前设置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$grub2</span>-editenv list</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">saved_entry</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$grub2</span>-set-default <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">## 重启</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$reboot</span></pre></td></tr></table></figure><p><code>重启可能会报错，此时进入设备bios，关闭安全模式再次尝试</code></p>\n<h3 id=\"13安装网卡驱动\"><a class=\"anchor\" href=\"#13安装网卡驱动\">#</a> 1.3 安装网卡驱动</h3>\n<p>重启进入新内核后可能存在网络不通，网卡不识别情况，应该是网卡驱动与内核版本不匹配，需要去官网下载网卡驱动并安装。<br />\n首先查看网卡驱动版本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$lspci</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        Subsystem: Dell Device 09a8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Flags: bus master, fast devsel, latency <span class=\"token number\">0</span>, IRQ <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        I/O ports at <span class=\"token number\">3000</span> <span class=\"token punctuation\">[</span>size<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        Memory at d1004000 <span class=\"token punctuation\">(</span><span class=\"token number\">64</span>-bit, non-prefetchable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>size<span class=\"token operator\">=</span>4K<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Memory at d1000000 <span class=\"token punctuation\">(</span><span class=\"token number\">64</span>-bit, non-prefetchable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>size<span class=\"token operator\">=</span>16K<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span> Power Management version <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span> MSI: Enable- <span class=\"token assign-left variable\">Count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>/1 Maskable- 64bit+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">70</span><span class=\"token punctuation\">]</span> Express Endpoint, MSI 01</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span>b0<span class=\"token punctuation\">]</span> MSI-X: Enable+ <span class=\"token assign-left variable\">Count</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> Masked-</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> Advanced Error Reporting</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">140</span><span class=\"token punctuation\">]</span> Virtual Channel</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">160</span><span class=\"token punctuation\">]</span> Device Serial Number 01-00-00-00-68-4c-e0-00</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">170</span><span class=\"token punctuation\">]</span> Latency Tolerance Reporting</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Capabilities: <span class=\"token punctuation\">[</span><span class=\"token number\">178</span><span class=\"token punctuation\">]</span> L1 PM Substates</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Kernel driver <span class=\"token keyword\">in</span> use: r8169</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Kernel modules: r8169</pre></td></tr></table></figure><p>就看 Kernel modules: r8169 这一行，说明需要 r8169 这个驱动<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVhbHRlay5jb20vemgtdHcvY29tcG9uZW50L3pvby9jYXRlZ29yeS9wY2ktODE2OS04MTEw\">下载地址</span><br />\n下载后进入目录依次执行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$rmmod</span> r8169</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$make</span> clean module</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$depmod</span> <span class=\"token parameter variable\">-a</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$modprobe</span> r8169</pre></td></tr></table></figure><p>这之后网卡应该就可以正常识别了</p>\n<h2 id=\"2安装bcc\"><a class=\"anchor\" href=\"#2安装bcc\">#</a> 2 安装 BCC</h2>\n<h3 id=\"21安装各种编译依赖\"><a class=\"anchor\" href=\"#21安装各种编译依赖\">#</a> 2.1 安装各种编译依赖</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> epel-release</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> yum update <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> yum groupinstall <span class=\"token parameter variable\">-y</span> <span class=\"token string\">\"Development tools\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> elfutils-libelf-devel cmake3 <span class=\"token function\">git</span> bison flex ncurses-devel</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> luajit luajit-devel  <span class=\"token comment\"># for Lua support</span></pre></td></tr></table></figure><h3 id=\"安装编译llvm\"><a class=\"anchor\" href=\"#安装编译llvm\">#</a> 安装编译 llvm</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span>  <span class=\"token parameter variable\">-LO</span>  http://releases.llvm.org/7.0.1/llvm-7.0.1.src.tar.xz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">curl</span>  <span class=\"token parameter variable\">-LO</span>  http://releases.llvm.org/7.0.1/cfe-7.0.1.src.tar.xz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> cfe-7.0.1.src.tar.xz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xf</span> llvm-7.0.1.src.tar.xz</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mkdir</span> clang-build</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">mkdir</span> llvm-build</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">cd</span> llvm-build</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cmake3 <span class=\"token parameter variable\">-G</span> <span class=\"token string\">\"Unix Makefiles\"</span> <span class=\"token parameter variable\">-DLLVM_TARGETS_TO_BUILD</span><span class=\"token operator\">=</span><span class=\"token string\">\"BPF;X86\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token parameter variable\">-DCMAKE_BUILD_TYPE</span><span class=\"token operator\">=</span>Release <span class=\"token punctuation\">..</span>/llvm-7.0.1.src</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/clang-build</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cmake3 <span class=\"token parameter variable\">-G</span> <span class=\"token string\">\"Unix Makefiles\"</span> <span class=\"token parameter variable\">-DLLVM_TARGETS_TO_BUILD</span><span class=\"token operator\">=</span><span class=\"token string\">\"BPF;X86\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token parameter variable\">-DCMAKE_BUILD_TYPE</span><span class=\"token operator\">=</span>Release <span class=\"token punctuation\">..</span>/cfe-7.0.1.src</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h3 id=\"22编译安装bcc\"><a class=\"anchor\" href=\"#22编译安装bcc\">#</a> 2.2 编译安装 bcc</h3>\n<p>前面编译的 llvm 是 7.0 版本，根据官网的说明，bcc 最新版本需要 llvm 11，因此安装 0.24.0 版本，下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lvdmlzb3IvYmNjL3JlbGVhc2VzL3RhZy92MC4yNC4w\"> release 版本</span><br />\n注意，要下载 <code>bcc-src-with-submodule</code> ，不然会少一下库文件。</p>\n<p>下载好解压后执行以下命令进行安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/iovisor/bcc.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> bcc/build<span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">cd</span> bcc/build</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cmake <span class=\"token punctuation\">..</span> <span class=\"token parameter variable\">-DCMAKE_INSTALL_PREFIX</span><span class=\"token operator\">=</span>/usr</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h2>\n<p>在 /usr/share/bcc/tools/ 下有一系列基于 bcc 实现的工具，如下：</p>\n<pre><code class=\"language-argdist.py\">bashreadline.py 获取正在运行的bash命令所带的参数\nbiolatency.py 统计block IO请求的耗时，打印直方图\nbiosnoop.py 打印每次block IO请求的详细信息\nbiotop.py 打印每个进程的block IO详情\nbitesize.py 分别打印每个进程的IO请求直方图\nbpflist.py 打印当前系统正在运行哪些BPF程序\nbtrfsslower.py 打印btrfs 慢于某一阈值的 read/write/open/fsync 操作的数量\ncachestat.py 打印Linux页缓存 hit/miss状况\ncachetop.py 分别打印每个进程的页缓存状况\ncapable.py 跟踪到内核函数 cap_capable() （安全检查相关）的调用，打印详情\nujobnew.sh 跟踪内存对象分配事件，打印统计，对研究GC很有帮助\ncpudist.py 统计task on-CPU time，即任务在被调度走之前在CPU上执行的时间\ncpuunclaimed.py 跟踪CPU run queues length，打印idle CPU (yet unclaimed by waiting threads) 百分比\ncriticalstat.py 跟踪涉及内核原子操作的事件，打印调用栈\ndbslower.py 跟踪 MySQL 或 PostgreSQL 的慢查询\ndbstat.py 打印MySQL或PostgreSQL的查询耗时直方图\ndcsnoop.py 跟踪目录缓存（dcache）查询请求\ndcstat.py 打印目录缓存（dcache）统计信息\ndeadlock.py 检查运行中的进行可能存在的死锁\nexecsnoop.py 跟踪新进程创建事件\next4dist.py 跟踪ext4文件系统的 read/write/open/fsyncs 请求，打印耗时直方图\next4slower.py 跟踪ext4慢请求\nfilelife.py 跟踪短寿命文件（跟踪期间创建然后删除）\nfileslower.py 跟踪较慢的同步读写请求\nfiletop.py 打印文件读写排行榜（top），以及进程详细信息\nfunccount.py 跟踪指定函数的调用次数，支持正则表达式\nfunclatency.py 跟踪指定函数，打印耗时\nfuncslower.py 跟踪唤醒时间（function invocations）较慢的内核和用户函数\ngethostlatency.py 跟踪hostname查询耗时\nhardirqs.py 跟踪硬中断耗时\ninject.py\njavacalls.sh\njavaflow.sh\njavagc.sh\njavaobjnew.sh\njavastat.sh\njavathreads.sh\nkillsnoop.py 跟踪 kill() 系统调用发出的信号\nllcstat.py 跟踪缓存引用和缓存命中率事件\nmdflush.py 跟踪md driver level的flush事件\nmemleak.py 检查内存泄漏\nmountsnoop.py 跟踪mount和unmount系统调用\nmysqld_qslower.py 跟踪MySQL慢查询\nnfsdist.py 打印NFS read/write/open/getattr 耗时直方图\nnfsslower.py 跟踪NFS read/write/open/getattr慢操作\nnodegc.sh 跟踪高级语言（Java/Python/Ruby/Node/）的GC事件\noffcputime.py 跟踪被阻塞的进程，打印调用栈、阻塞耗时等信息\noffwaketime.py 跟踪被阻塞且off-CPU的进程\noomkill.py 跟踪Linux out-of-memory (OOM) killer\nopensnoop.py 跟踪 open() 系统调用\nperlcalls.sh\nperlstat.sh\nphpcalls.sh\nphpflow.sh\nphpstat.sh\npidpersec.py 跟踪每分钟新创建的进程数量（通过跟踪 fork() ）\nprofile.py CPU profiler\npythoncalls.sh\npythoonflow.sh\npythongc.sh\npythonstat.sh\nreset-trace.sh\nrubycalls.sh\nrubygc.sh\nrubyobjnew.sh\nrunqlat.py 调度器run queue latency直方图，每个task等待CPU的时间\nrunqlen.py 调度器run queue使用百分比\nrunqslower.py 跟踪调度延迟很大的进程（等待被执行但是没有空闲CPU）\nshmsnoop.py 跟踪 shm*() 系统调用\nslabratetop.py 跟踪内核内存分配缓存（SLAB或SLUB）\nsofdsnoop.py 跟踪unix socket 文件描述符（FD）\nsoftirqs.py 跟踪软中断\nsolisten.py 跟踪内核TCP listen事件\nsslsniff.py 跟踪OpenSSL/GnuTLS/NSS的 write/send和read/recv函数\nstackcount.py 跟踪函数和调用栈\nstatsnoop.py 跟踪 stat() 系统调用\nsyncsnoop.py 跟踪 sync() 系统调用\nsyscount.py 跟踪各系统调用次数\ntclcalls.sh\ntclflow.sh\ntclobjnew.sh\ntclstat.sh\ntcpaccept.py 跟踪内核接受TCP连接的事件\ntcpconnect.py 跟踪内核建立TCP连接的事件\ntcpconnlat.py 跟踪建立TCP连接比较慢的事件，打印进程、IP、端口等详细信息\ntcpdrop.py 跟踪内核drop TCP 包或片（segment）的事件\ntcplife.py 打印跟踪期间建立和关闭的的TCP session\ntcpretrans.py 跟踪TCP重传\ntcpstates.py 跟踪TCP状态变化，包括每个状态的时长\ntcpsubnet.py 根据destination打印每个subnet的throughput\ntcptop.py 根据host和port打印throughput\ntcptracer.py 跟踪进行TCP connection操作的内核函数\ntplist.py 打印内核tracepoint和USDT probes点，已经它们的参数\ntrace.py 跟踪指定的函数，并按照指定的格式打印函数当时的参数值\nttysnoop.py 跟踪指定的tty或pts设备，将其打印复制一份输出\nvfscount.py 统计VFS（虚拟文件系统）调用\nvfsstat.py 跟踪一些重要的VFS函数，打印统计信息\nwakeuptime.py 打印进程被唤醒的延迟及其调用栈\nxfsdist.py 打印XFS read/write/open/fsync 耗时直方图\nxfsslower.py 打印XFS慢请求\nzfsdist.py 打印ZFS read/write/open/fsync 耗时直方图\nzfsslower.py 打印ZFS慢请求\n\n\n</code></pre>\n",
            "tags": [
                "Ebpf内核追踪",
                "Ebpf",
                "BCC"
            ]
        },
        {
            "id": "http://example.com/2023/04/27/kernel-trace/",
            "url": "http://example.com/2023/04/27/kernel-trace/",
            "title": "【内核追踪】BCC，bpftrace，libbpf内核追踪技术初探及对比",
            "date_published": "2023-04-27T07:30:41.555Z",
            "content_html": "<h2 id=\"ebpf技术\"><a class=\"anchor\" href=\"#ebpf技术\">#</a> Ebpf 技术</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzg3NjYyMTc=\">参考</span><br />\n Ebpf 全称为 Extended Berkeley Packet Filter”，其前身为 BPF（Berkeley Packet Filter），用来灵活高效的从操作系统内种抓取数据包，和内核追踪本身没什么关系。<br />\ntcpudump 即使采用的 BPF 技术抓取数据包。<br />\n1. 其原理就是在内核中实现一个虚拟机，然后用户态程序通过系统调用把数据包过滤代码载入到虚拟机中运行。</p>\n<p>2. 通过在协议栈代码中添加 hook 点，实现数据包在虚拟机中的重放，协议栈的运行与虚拟机的运行相互独立。<br />\n3. 虚拟机中的模块与用户态程序通过 buffer 共享内存进行通信，不进行系统调用，减少上下文切换。</p>\n<p>之后再 BPF 基础上，linux 实现了 eBPF。这是对 BPF 的一个扩展。eBPF 不仅仅局限于在网络代码中添加 hook，他可以在更多内核事件中实现监控。</p>\n<p>用编写的 eBPF 程序会被编译成 eBPF 字节码，eBPF 字节码使用 bpf_insn 结构来表示，如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">bpf_insn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __u8    code<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 操作码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __u8    dst_reg<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 目标寄存器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __u8    src_reg<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 源寄存器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __s16   off<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 偏移量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    __s32   imm<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 立即操作数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>eBPF 程序会被 LLVM/Clang 编译成 bpf_insn 结构数组，当内核要执行 eBPF 字节码时，会调用 __bpf_prog_run () 函数来执行。<br />\n如果开启了 JIT（即时编译技术），内核会将 eBPF 字节码编译成本地机器码（Native Code）。这样就可以直接执行，而不需要虚拟机来执行</p>\n</blockquote>\n<p>eBPF 程序是由用户编写的，编译成 eBPF 字节码后，需要加载到内核才能被内核使用。<br />\n用户态可以通过调用 sys_bpf () 系统调用把 eBPF 程序加载到内核，而 sys_bpf () 系统调用会通过调用 bpf_prog_load () 内核函数加载 eBPF 程序。</p>\n<p>1. 创建一个 bpf_prog 对象，用于保存 eBPF 字节码和 eBPF 程序的相关信息。<br />\n2. 把 eBPF 字节码从用户态复制到 bpf_prog 对象的 insns 成员中，insns 成员是一个类型为 bpf_insn 结构的数组。<br />\n3. 根据 eBPF 程序所属的类型（如 socket、kprobes 或 xdp 等），找到其相关处理函数（如 helper 函数对应的修正函数，下面会介绍）。<br />\n4. 检查 eBPF 字节码是否合法。由于 eBPF 程序运行在内核态，所以要保证其安全性，否则将会导致内核崩溃。<br />\n5. 修正 helper 函数的偏移量（下面会介绍）。<br />\n6. 尝试将 eBPF 字节码编译成本地机器码，主要为了提高 eBPF 程序的执行效率。<br />\n7. 申请一个文件句柄用于与 bpf_prog 对象关联，这个文件句柄将会返回给用户态，用户态可以通过这个文件句柄来读取内核中的 eBPF 程序。</p>\n<p>本文主要关注也不在数据包抓取上，而是内核追踪。目前采用该技术的内核追踪技术有三个，下面分别介绍和对比。</p>\n<h2 id=\"bcc\"><a class=\"anchor\" href=\"#bcc\">#</a> BCC</h2>\n<p>BCC 是基于 Ebpf 的内核跟踪工具集，大多数 BCC 功能需要 linux4.1 及以上版本<br />\n BCC 使用 C 语言进行内核检测，并使用 Python 和 lua 作为前端简化了 BPF 程序的编写，它适用于多种任务，如性能分析和网络流量控制。</p>\n<p><img data-src=\"https://cloudnative.to/blog/bpf-intro/linux_ebpf_internals.png\" alt=\"图片\" /></p>\n<p>1. 用户使用 python 或者 lua 等语言编写前端程序以及 C 语言编写的 BPF 内核态程序<br />\n 2.BCC 编译器将 C 语言编写的内核监测程序编译成字节码加载到内核执行<br />\n BCC 可以它适用于许多任务，包括性能分析和网络流量控制<br />\n但是他的缺点也很明显，体积较大，每次都要重新编译，执行程序的机器都需要安装内核头文件，可移植性较差</p>\n<h2 id=\"bpftrace\"><a class=\"anchor\" href=\"#bpftrace\">#</a> bpftrace</h2>\n<p>bpftrace 基于 eBPF 和 BBC 实现了通过探针机制采集内核和程序运行的信息，然后用图表等方式将信息展示出来，帮助开发者找到隐藏较深的 Bug、安全问题和性能瓶颈。<br />\nbpftrace 语言的灵感来自 awk 和 C，以及 DTrace 和 SystemTap 等前身跟踪器。</p>\n<h2 id=\"libbpf\"><a class=\"anchor\" href=\"#libbpf\">#</a> libbpf</h2>\n",
            "tags": [
                "Ebpf内核追踪",
                "Ebpf",
                "BCC",
                "bpftrace",
                "libbpf"
            ]
        },
        {
            "id": "http://example.com/2023/04/26/video_web-1/",
            "url": "http://example.com/2023/04/26/video_web-1/",
            "title": "【uniapp+express+mysql制作视频网站】express后端搭建",
            "date_published": "2023-04-26T15:03:32.526Z",
            "content_html": "<p>这个系列用来记录视频网站的搭建过程。为了降低学习成本，我选择使用 uniapp 实现跨平台软件开发，使用 express 作为简易后端，使用 mysql 作为数据库。由于是低成本制作，并不会考虑自己存储视频资源，而是选择全部使用外部链接。</p>\n<h3 id=\"express简介\"><a class=\"anchor\" href=\"#express简介\">#</a> Express 简介</h3>\n<p>Express 是一个体积很小使用灵活的 nodejs web 程序开发框架。他的安装部署非常的便捷。</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> express-generator</pre></td></tr></table></figure><h3 id=\"创建项目\"><a class=\"anchor\" href=\"#创建项目\">#</a> 创建项目</h3>\n<p>只需要简单的命令就可以创建出一个 web 项目</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>express + 项目名称</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">cd</span> 项目名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h3 id=\"启动web\"><a class=\"anchor\" href=\"#启动web\">#</a> 启动 web</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> start</pre></td></tr></table></figure><p>之后打开 localhost:3000 即可看到 express 返回的页面</p>\n<h3 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── app.js</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── node_modules</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span>   └── <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>├── bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│   └── www</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>├── package.json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>├── public</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│   ├── images</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│   ├── javascripts</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│   └── stylesheets</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>│       └── style.css</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>├── routes</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│   ├── index.js</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│   └── users.js</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>└── views</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ├── error.pug</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ├── index.pug</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    └── layout.pug</pre></td></tr></table></figure><p>1.node_modules 是 npm install 生成的项目依赖项<br />\n 2.package.json  此文件是项目的配置文件，配置启动脚本目录，项目名称，以及 npm install 所使用的项目依赖项等<br />\n 3.public 文件包含的是网站静态文件<br />\n 4.route 是路由文件夹<br />\n 5.views 存放视图</p>\n",
            "tags": [
                "视频网站",
                "uniapp",
                "express",
                "web"
            ]
        },
        {
            "id": "http://example.com/2023/04/25/dpdk-log/",
            "url": "http://example.com/2023/04/25/dpdk-log/",
            "title": "log代码解读",
            "date_published": "2023-04-25T05:36:35.393Z",
            "content_html": "<p>dpdk 的日志系统并不复杂。dpdk 使用 type 和 level 划分日志，除了预设的日志类型，用户也可自行注册日志类型，dpdk 日志系统的初始化在 main 函数之前。</p>\n<h3 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> 1. 初始化</h3>\n<p>dpdk 的日志初始化函数为 rte_log_init，执行再 main 函数之前，定义在:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RTE_INIT_PRIO</span><span class=\"token punctuation\">(</span>rte_log_init<span class=\"token punctuation\">,</span> LOG<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">rte_log_set_global_level</span><span class=\"token punctuation\">(</span>RTE_LOG_DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置默认 log 登记为 debug</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\trte_logs<span class=\"token punctuation\">.</span>dynamic_types <span class=\"token operator\">=</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>RTE_LOGTYPE_FIRST_EXT_ID<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rte_log_dynamic_type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 申请 32 个动态日志类型的空间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rte_logs<span class=\"token punctuation\">.</span>dynamic_types <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">/* register legacy log types */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">RTE_DIM</span><span class=\"token punctuation\">(</span>logtype_strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 预制几种日志类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">__rte_log_register</span><span class=\"token punctuation\">(</span>logtype_strings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>logtype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tlogtype_strings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>log_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\trte_logs<span class=\"token punctuation\">.</span>dynamic_types_len <span class=\"token operator\">=</span> RTE_LOGTYPE_FIRST_EXT_ID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该函数由宏 <code>RTE_INIT_PRIO</code>  定义</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">RTE_INIT_PRIO</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token expression\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token function\">RTE_PRIO</span><span class=\"token punctuation\">(</span>prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>这里 <code>__attribute__((constructor</code>  是用来修饰函数的，代表这个函数是在 main 函数执行之前执行</p>\n<p>同时一个程序可以有多个 <code>__attribute__((constructor</code> ，那么就需要有优先级概念，优先级数字越小，优先级越高</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RTE_PRIORITY_LOG</span> <span class=\"token expression\"><span class=\"token number\">101</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">RTE_PRIO</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>prio<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token expression\">RTE_PRIORITY_ </span><span class=\"token punctuation\">##</span> <span class=\"token expression\">prio</span></span></pre></td></tr></table></figure><p>优先级还是很高的～</p>\n<p><code>rte_log_init</code>  的内容就是设置默认日志等级为 debug，然后注册几种基本的日志类型 <code>__rte_log_register</code></p>\n<p>log 类型具有两个成员，一个是名字，一个是 log 等级。 <code>__rte_log_register</code>  将所有日志类型的等级注册为 info</p>\n<h3 id=\"2日志类型注册\"><a class=\"anchor\" href=\"#2日志类型注册\">#</a> 2. 日志类型注册</h3>\n<p>用户可以自定义注册日志类型，默认注册类型也为 info，默认系统日志等级为 debug，所以 info 类型的日志也会被打印</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rte_log_register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">rte_log_dynamic_type</span> <span class=\"token operator\">*</span>new_dynamic_types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tid <span class=\"token operator\">=</span> <span class=\"token function\">rte_log_lookup</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tnew_dynamic_types <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>rte_logs<span class=\"token punctuation\">.</span>dynamic_types<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rte_log_dynamic_type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>rte_logs<span class=\"token punctuation\">.</span>dynamic_types_len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_dynamic_types <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>ENOMEM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\trte_logs<span class=\"token punctuation\">.</span>dynamic_types <span class=\"token operator\">=</span> new_dynamic_types<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">__rte_log_register</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> rte_logs<span class=\"token punctuation\">.</span>dynamic_types_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\trte_logs<span class=\"token punctuation\">.</span>dynamic_types_len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3输出日志\"><a class=\"anchor\" href=\"#3输出日志\">#</a> 3. 输出日志</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rte_log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> level<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> logtype<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tva_list ap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">rte_vlog</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> logtype<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">rte_vlog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> level<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> logtype<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> va_list ap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tFILE <span class=\"token operator\">*</span>f <span class=\"token operator\">=</span> <span class=\"token function\">rte_log_get_stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logtype <span class=\"token operator\">>=</span> rte_logs<span class=\"token punctuation\">.</span>dynamic_types_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">rte_log_can_log</span><span class=\"token punctuation\">(</span>logtype<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">/* save loglevel and logtype in a global per-lcore variable */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">RTE_PER_LCORE</span><span class=\"token punctuation\">(</span>log_cur_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loglevel <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">RTE_PER_LCORE</span><span class=\"token punctuation\">(</span>log_cur_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>logtype <span class=\"token operator\">=</span> logtype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tret <span class=\"token operator\">=</span> <span class=\"token function\">vfprintf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>rte_vlog 首先获取到目前系统设置的文件流，然后判断等级参数是否合理，如果等级大于系统设置的默认等级，不进行打印，之后调用 vprintf 日志数据打入到流文件中。<br />\n另外可以设置日志输入流</p>\n<pre><code class=\"language-C\">rte_openlog_stream(FILE *f)\n&#123;\n\trte_logs.file = f;\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "dpdk代码解读",
                "dpdk"
            ]
        }
    ]
}