{
    "version": "https://jsonfeed.org/version/1",
    "title": "风雪追击",
    "subtitle": "一缕春风走向你",
    "icon": "https://github.com/Provence965437/images/favicon.ico",
    "description": "记录博客，从事驱动开发，unity业余爱好",
    "home_page_url": "https://github.com/Provence965437",
    "items": [
        {
            "id": "https://github.com/Provence965437/2023/04/25/dpdk-log/",
            "url": "https://github.com/Provence965437/2023/04/25/dpdk-log/",
            "title": "log代码解读",
            "date_published": "2023-04-25T05:36:35.393Z",
            "content_html": "<p>dpdk 的日志系统并不复杂。dpdk 使用 type 和 level 划分日志，除了预设的日志类型，用户也可自行注册日志类型，dpdk 日志系统的初始化在 main 函数之前。</p>\n<h3 id=\"1初始化\"><a class=\"anchor\" href=\"#1初始化\">#</a> 1. 初始化</h3>\n<p>dpdk 的日志初始化函数为 rte_log_init，执行再 main 函数之前，定义在:</p>\n<pre><code class=\"language-C\">RTE_INIT_PRIO(rte_log_init, LOG)\n&#123;\n\tuint32_t i;\n\n\trte_log_set_global_level(RTE_LOG_DEBUG);//设置默认log登记为debug\n\n\trte_logs.dynamic_types = calloc(RTE_LOGTYPE_FIRST_EXT_ID,\n\t\tsizeof(struct rte_log_dynamic_type));//申请32个动态日志类型的空间\n\tif (rte_logs.dynamic_types == NULL)\n\t\treturn;\n\n\t/* register legacy log types */\n\tfor (i = 0; i &lt; RTE_DIM(logtype_strings); i++)//预制几种日志类型\n\t\t__rte_log_register(logtype_strings[i].logtype,\n\t\t\t\tlogtype_strings[i].log_id);\n\n\trte_logs.dynamic_types_len = RTE_LOGTYPE_FIRST_EXT_ID;\n&#125;\n</code></pre>\n<p>该函数由宏 <code>RTE_INIT_PRIO</code>  定义</p>\n<pre><code class=\"language-C\">#define RTE_INIT_PRIO(func, prio) \\\nstatic void __attribute__((constructor(RTE_PRIO(prio)), used)) func(void)\n#endif\n</code></pre>\n<p>这里 <code>__attribute__((constructor</code>  是用来修饰函数的，代表这个函数是在 main 函数执行之前执行</p>\n<p>同时一个程序可以有多个 <code>__attribute__((constructor</code> ，那么就需要有优先级概念，优先级数字越小，优先级越高</p>\n<pre><code class=\"language-C\">#define RTE_PRIORITY_LOG 101\n\n#define RTE_PRIO(prio) \\\n\tRTE_PRIORITY_ ## prio\n</code></pre>\n<p>优先级还是很高的～</p>\n<p><code>rte_log_init</code>  的内容就是设置默认日志等级为 debug，然后注册几种基本的日志类型 <code>__rte_log_register</code></p>\n<p>log 类型具有两个成员，一个是名字，一个是 log 等级。 <code>__rte_log_register</code>  将所有日志类型的等级注册为 info</p>\n<h3 id=\"2日志类型注册\"><a class=\"anchor\" href=\"#2日志类型注册\">#</a> 2. 日志类型注册</h3>\n<p>用户可以自定义注册日志类型，默认注册类型也为 info，默认系统日志等级为 debug，所以 info 类型的日志也会被打印</p>\n<pre><code class=\"language-C\">int\nrte_log_register(const char *name)\n&#123;\n\tstruct rte_log_dynamic_type *new_dynamic_types;\n\tint id, ret;\n\n\tid = rte_log_lookup(name);\n\tif (id &gt;= 0)\n\t\treturn id;\n\n\tnew_dynamic_types = realloc(rte_logs.dynamic_types,\n\t\tsizeof(struct rte_log_dynamic_type) *\n\t\t(rte_logs.dynamic_types_len + 1));\n\tif (new_dynamic_types == NULL)\n\t\treturn -ENOMEM;\n\trte_logs.dynamic_types = new_dynamic_types;\n\n\tret = __rte_log_register(name, rte_logs.dynamic_types_len);\n\tif (ret &lt; 0)\n\t\treturn ret;\n\n\trte_logs.dynamic_types_len++;\n\n\treturn ret;\n&#125;\n</code></pre>\n<h3 id=\"3输出日志\"><a class=\"anchor\" href=\"#3输出日志\">#</a> 3. 输出日志</h3>\n<pre><code class=\"language-C\">rte_log(uint32_t level, uint32_t logtype, const char *format, ...)\n&#123;\n\tva_list ap;\n\tint ret;\n\n\tva_start(ap, format);\n\tret = rte_vlog(level, logtype, format, ap);\n\tva_end(ap);\n\treturn ret;\n&#125;\n\nint\nrte_vlog(uint32_t level, uint32_t logtype, const char *format, va_list ap)\n&#123;\n\tFILE *f = rte_log_get_stream();\n\tint ret;\n\n\tif (logtype &gt;= rte_logs.dynamic_types_len)\n\t\treturn -1;\n\tif (!rte_log_can_log(logtype, level))\n\t\treturn 0;\n\n\t/* save loglevel and logtype in a global per-lcore variable */\n\tRTE_PER_LCORE(log_cur_msg).loglevel = level;\n\tRTE_PER_LCORE(log_cur_msg).logtype = logtype;\n\n\tret = vfprintf(f, format, ap);\n\tfflush(f);\n\treturn ret;\n&#125;\n</code></pre>\n<p>rte_vlog 首先获取到目前系统设置的文件流，然后判断等级参数是否合理，如果等级大于系统设置的默认等级，不进行打印，之后调用 vprintf 日志数据打入到流文件中。<br />\n另外可以设置日志输入流</p>\n<pre><code class=\"language-C\">rte_openlog_stream(FILE *f)\n&#123;\n\trte_logs.file = f;\n\treturn 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "dpdk代码解读",
                "dpdk"
            ]
        },
        {
            "id": "https://github.com/Provence965437/2023/04/24/hello-world/",
            "url": "https://github.com/Provence965437/2023/04/24/hello-world/",
            "title": "Hello World",
            "date_published": "2023-04-24T04:22:57.562Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}